name: Deploy to app service

on:
  workflow_dispatch: 
    inputs:
      environment:
        description: "Azure Web App Environment (e.g., Production)"
        type: environment
        required: true
      version:
        description: "Docker Image Version (e.g., 1.0.0)"
        type: string
        required: true

permissions:
  contents: read

jobs:
  deploy:
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: none
    runs-on:
      labels: azure-vm
    strategy:
      matrix:
        service:
          - { name: "Basket", startup_project: "./src/Services/Basket/Basket.Api", repository: "basket", azure_webapp: "app-basket-gwc", database_migrations: "false", publish_profile_secret: "AZURE_WEBAPP_PUBLISH_PROFILE_BASKET" }
          - { name: "Catalog", startup_project: "./src/Services/Catalog/Catalog.API", repository: "catalog", azure_webapp: "app-catalog-gwc", database_migrations: "false", publish_profile_secret: "AZURE_WEBAPP_PUBLISH_PROFILE_CATALOG" }
          - { name: "Discount", startup_project: "./src/Services/Discount/Discount.Grpc", repository: "discount", azure_webapp: "app-discount-gwc", database_migrations: "false", publish_profile_secret: "AZURE_WEBAPP_PUBLISH_PROFILE_DISCOUNT" }
          - { name: "Ordering", startup_project: "./src/Services/Ordering/Ordering.API", repository: "ordering", azure_webapp: "app-ordering-gwc", database_migrations: "false", publish_profile_secret: "AZURE_WEBAPP_PUBLISH_PROFILE_ORDERING" }
          - { name: "YarpApiGateway", startup_project: "./src/ApiGateways/YarpApiGateway", repository: "yarpapigateway", azure_webapp: "app-yarpapigateway-gwc", database_migrations: "false", publish_profile_secret: "AZURE_WEBAPP_PUBLISH_PROFILE_YARPAPIGATEWAY" }
          - { name: "WebApp", startup_project: "./src/WebApps/Shopping.Web", repository: "webapp", azure_webapp: "app-webapp-gwc", database_migrations: "false", publish_profile_secret: "AZURE_WEBAPP_PUBLISH_PROFILE_WEBAPP" }  
    
    env:
      IMAGE: ${{ vars.ACR_URL }}/${{ vars.REPOSITORY }}-${{ matrix.service.repository }}:${{ github.event.inputs.version }}
      DOTNET_VERSION: 8.0.205
      DOTNET_CONFIGURATION: "Release"
      DOTNET_INSTALL_DIR: "~/tools/dotnet"
      
    steps:
      - name: Validate version
        run: |
            echo "Validating that tag is a production deploy tag (must be in the format [0-9]+.[0-9]+.[0-9]+, ex. 1.2.3)"
            echo "${{ github.event.inputs.version }}" | grep -P '[0-9]+.[0-9]+.[0-9]+'

      - name: Checkout Repository Code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ matrix.service.startup_project }}
    
      - name: Build
        run: dotnet build ${{ matrix.service.startup_project }} --configuration ${{ env.DOTNET_CONFIGURATION }} --no-restore

      - name: Apply Database Migrations (EF Core)
        if: ${{ matrix.service.database_migrations == 'true' }}
        run: |
          echo "Running migrations for service: ${{ matrix.service.name }}"
          dotnet ef database update --startup-project ${{ matrix.service.startup_project }} \
            --connection "${{ secrets.DATABASE_CONNECTION_STRING }}"

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ matrix.service.azure_webapp }}
          publish-profile: ${{ secrets[matrix.service.publish_profile_secret] }}
          images: "${{ env.IMAGE }}"
